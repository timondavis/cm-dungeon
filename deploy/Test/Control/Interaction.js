"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
require("mocha");
var Actor_1 = require("../../Model/Actor");
var D20_Attack_1 = require("../../Model/Ability/d20/D20_Attack");
var Interaction_1 = require("../../Control/Interaction");
var CheckExecutor_1 = require("cm-check/lib/Check/CheckExecutor");
var Effect_1 = require("../../Model/Effect");
var Ability_1 = require("../../Model/Ability/Ability");
describe('Interaction', function () {
    it('should be resolvable having, at a minimum, been generated by a source actor and aimed at a target actor', function () {
        var a = new Actor_1.Actor();
        var b = new Actor_1.Actor();
        a.attributes.add('HP', 10);
        a.attributes.add('Strength', 14);
        a.attributes.add('AC', 1);
        b.attributes.add('HP', 10);
        b.attributes.add('Strength', 14);
        b.attributes.add('AC', 1);
        var attack = new D20_Attack_1.D20_Attack();
        chai_1.expect(a.attributes.get('HP')).to.be.equal(10);
        chai_1.expect(b.attributes.get('HP')).to.be.equal(10);
        a.abilities.add('attack', attack);
        b.abilities.add('attack', attack);
        a.execute('attack', b);
        chai_1.expect(b.attributes.get('HP')).to.be.lessThan(10);
        b.execute('attack', a);
        chai_1.expect(a.attributes.get('HP')).to.be.lessThan(10);
    });
    it('Is ready for use on instantiation', function () {
        var a = new Actor_1.Actor();
        var b = new Actor_1.Actor();
        a.attributes.add('HP', 10);
        b.attributes.add('HP', 10);
        var c = CheckExecutor_1.CheckExecutor.getInstance().generateCheck();
        c.addDie(1, 6);
        c.setTarget(1);
        var i = new Interaction_1.Interaction(a, b, c);
        var e = new Effect_1.Effect();
        e.flagAssignments.add('hit', function () { return true; });
        i.effects.add(e);
        chai_1.expect(i.execute()).to.be.true;
        chai_1.expect(b.flags.get('hit')).to.be.true;
        chai_1.expect(function () { return a.flags.get('hit'); }).to.throw;
    });
    it('employs pre-check callbacks', function () {
        var callbackTripped = false;
        var source = new Actor_1.Actor();
        var target = new Actor_1.Actor();
        var check = CheckExecutor_1.CheckExecutor.getInstance().generateCheck();
        source.labels.add('Name', 'Source');
        target.labels.add('Name', 'Target');
        check.setTarget(1000);
        check.addDie(1, 2);
        var i = new Interaction_1.Interaction(source, target, check);
        i.preCheckCallbacks.add(function (s, t, c) {
            callbackTripped = true;
            chai_1.expect(s.labels.get('Name')).to.be.equal('Source');
            chai_1.expect(t.labels.get('Name')).to.be.equal('Target');
            chai_1.expect(c.getTarget()).to.be.equal(1000);
            s.labels.replace('Name', 'Sam');
            t.labels.replace('Name', 'Tom');
            c.setTarget(0);
        });
        var ability = new AppendNameAbility();
        ability.i = i;
        source.abilities.add('AppendName', ability);
        source.execute('AppendName', target);
        chai_1.expect(source.labels.get('Name')).to.be.equal('Sam');
        chai_1.expect(target.labels.get('Name')).to.be.equal('Target-Updated');
        chai_1.expect(check.getTarget()).to.be.equal(0);
    });
    var AppendNameAbility = /** @class */ (function (_super) {
        __extends(AppendNameAbility, _super);
        function AppendNameAbility() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AppendNameAbility.prototype.execute = function (source, target, data) {
            var e = new Effect_1.Effect();
            var name = target.labels.get('Name');
            var newName = name + "-Updated";
            e.labelAssignments.add('Name', function () { return newName; });
            this.i.effects.add(e);
            this.i.execute();
            return this;
        };
        return AppendNameAbility;
    }(Ability_1.Ability));
});
//# sourceMappingURL=Interaction.js.map